// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Entitlements.plist`.
    static let entitlementsPlist = FileResource(bundle: _R.hostingBundle, name: "Entitlements", pathExtension: "plist")
    
    /// `bundle.URLForResource("Entitlements", withExtension: "plist")`
    static func entitlementsPlist(_: Void) -> NSURL? {
      let fileResource = R.file.entitlementsPlist
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 63 images.
  struct image {
    /// Image `About`.
    static let about = ImageResource(bundle: _R.hostingBundle, name: "About")
    /// Image `AirAudio`.
    static let airAudio = ImageResource(bundle: _R.hostingBundle, name: "AirAudio")
    /// Image `AirPlay`.
    static let airPlay = ImageResource(bundle: _R.hostingBundle, name: "AirPlay")
    /// Image `AirSpeaker`.
    static let airSpeaker = ImageResource(bundle: _R.hostingBundle, name: "AirSpeaker")
    /// Image `AirTV`.
    static let airTV = ImageResource(bundle: _R.hostingBundle, name: "AirTV")
    /// Image `Anime`.
    static let anime = ImageResource(bundle: _R.hostingBundle, name: "Anime")
    /// Image `Autoplay`.
    static let autoplay = ImageResource(bundle: _R.hostingBundle, name: "Autoplay")
    /// Image `BookmarkOff`.
    static let bookmarkOff = ImageResource(bundle: _R.hostingBundle, name: "BookmarkOff")
    /// Image `BookmarkOn`.
    static let bookmarkOn = ImageResource(bundle: _R.hostingBundle, name: "BookmarkOn")
    /// Image `CastOff`.
    static let castOff = ImageResource(bundle: _R.hostingBundle, name: "CastOff")
    /// Image `CastOn0`.
    static let castOn0 = ImageResource(bundle: _R.hostingBundle, name: "CastOn0")
    /// Image `CastOn1`.
    static let castOn1 = ImageResource(bundle: _R.hostingBundle, name: "CastOn1")
    /// Image `CastOn2`.
    static let castOn2 = ImageResource(bundle: _R.hostingBundle, name: "CastOn2")
    /// Image `CastOn`.
    static let castOn = ImageResource(bundle: _R.hostingBundle, name: "CastOn")
    /// Image `Check Updates`.
    static let checkUpdates = ImageResource(bundle: _R.hostingBundle, name: "Check Updates")
    /// Image `Checkmark`.
    static let checkmark = ImageResource(bundle: _R.hostingBundle, name: "Checkmark")
    /// Image `Close`.
    static let close = ImageResource(bundle: _R.hostingBundle, name: "Close")
    /// Image `Color`.
    static let color = ImageResource(bundle: _R.hostingBundle, name: "Color")
    /// Image `Disclosure Indicator`.
    static let disclosureIndicator = ImageResource(bundle: _R.hostingBundle, name: "Disclosure Indicator")
    /// Image `Download Limit`.
    static let downloadLimit = ImageResource(bundle: _R.hostingBundle, name: "Download Limit")
    /// Image `Error`.
    static let error = ImageResource(bundle: _R.hostingBundle, name: "Error")
    /// Image `Fast Forward`.
    static let fastForward = ImageResource(bundle: _R.hostingBundle, name: "Fast Forward")
    /// Image `Filter`.
    static let filter = ImageResource(bundle: _R.hostingBundle, name: "Filter")
    /// Image `Font`.
    static let font = ImageResource(bundle: _R.hostingBundle, name: "Font")
    /// Image `Heart`.
    static let heart = ImageResource(bundle: _R.hostingBundle, name: "Heart")
    /// Image `Maximum Peers`.
    static let maximumPeers = ImageResource(bundle: _R.hostingBundle, name: "Maximum Peers")
    /// Image `Media Selection`.
    static let mediaSelection = ImageResource(bundle: _R.hostingBundle, name: "Media Selection")
    /// Image `Movies`.
    static let movies = ImageResource(bundle: _R.hostingBundle, name: "Movies")
    /// Image `Open Source Licenses`.
    static let openSourceLicenses = ImageResource(bundle: _R.hostingBundle, name: "Open Source Licenses")
    /// Image `Pause`.
    static let pause = ImageResource(bundle: _R.hostingBundle, name: "Pause")
    /// Image `Placeholder`.
    static let placeholder = ImageResource(bundle: _R.hostingBundle, name: "Placeholder")
    /// Image `Play`.
    static let play = ImageResource(bundle: _R.hostingBundle, name: "Play")
    /// Image `Progress Indicator`.
    static let progressIndicator = ImageResource(bundle: _R.hostingBundle, name: "Progress Indicator")
    /// Image `Quality`.
    static let quality = ImageResource(bundle: _R.hostingBundle, name: "Quality")
    /// Image `Remove Cache`.
    static let removeCache = ImageResource(bundle: _R.hostingBundle, name: "Remove Cache")
    /// Image `Report Bug`.
    static let reportBug = ImageResource(bundle: _R.hostingBundle, name: "Report Bug")
    /// Image `Rewind`.
    static let rewind = ImageResource(bundle: _R.hostingBundle, name: "Rewind")
    /// Image `Scale To Fill`.
    static let scaleToFill = ImageResource(bundle: _R.hostingBundle, name: "Scale To Fill")
    /// Image `Scale To Fit`.
    static let scaleToFit = ImageResource(bundle: _R.hostingBundle, name: "Scale To Fit")
    /// Image `Scrubber Image`.
    static let scrubberImage = ImageResource(bundle: _R.hostingBundle, name: "Scrubber Image")
    /// Image `Search`.
    static let search = ImageResource(bundle: _R.hostingBundle, name: "Search")
    /// Image `Settings`.
    static let settings = ImageResource(bundle: _R.hostingBundle, name: "Settings")
    /// Image `Size`.
    static let size = ImageResource(bundle: _R.hostingBundle, name: "Size")
    /// Image `SkipBack`.
    static let skipBack = ImageResource(bundle: _R.hostingBundle, name: "SkipBack")
    /// Image `SkipForward`.
    static let skipForward = ImageResource(bundle: _R.hostingBundle, name: "SkipForward")
    /// Image `StarOff`.
    static let starOff = ImageResource(bundle: _R.hostingBundle, name: "StarOff")
    /// Image `Star`.
    static let star = ImageResource(bundle: _R.hostingBundle, name: "Star")
    /// Image `Stroke Color`.
    static let strokeColor = ImageResource(bundle: _R.hostingBundle, name: "Stroke Color")
    /// Image `Stroke Width`.
    static let strokeWidth = ImageResource(bundle: _R.hostingBundle, name: "Stroke Width")
    /// Image `Subtitles`.
    static let subtitles = ImageResource(bundle: _R.hostingBundle, name: "Subtitles")
    /// Image `TV`.
    static let tV = ImageResource(bundle: _R.hostingBundle, name: "TV")
    /// Image `Upload Limit`.
    static let uploadLimit = ImageResource(bundle: _R.hostingBundle, name: "Upload Limit")
    /// Image `Version`.
    static let version = ImageResource(bundle: _R.hostingBundle, name: "Version")
    /// Image `Volume Maximum`.
    static let volumeMaximum = ImageResource(bundle: _R.hostingBundle, name: "Volume Maximum")
    /// Image `Volume Minimum`.
    static let volumeMinimum = ImageResource(bundle: _R.hostingBundle, name: "Volume Minimum")
    /// Image `WatchedOff`.
    static let watchedOff = ImageResource(bundle: _R.hostingBundle, name: "WatchedOff")
    /// Image `WatchedOn`.
    static let watchedOn = ImageResource(bundle: _R.hostingBundle, name: "WatchedOn")
    /// Image `onepassword-button-light`.
    static let onepasswordButtonLight = ImageResource(bundle: _R.hostingBundle, name: "onepassword-button-light")
    /// Image `onepassword-button`.
    static let onepasswordButton = ImageResource(bundle: _R.hostingBundle, name: "onepassword-button")
    /// Image `onepassword-navbar-light`.
    static let onepasswordNavbarLight = ImageResource(bundle: _R.hostingBundle, name: "onepassword-navbar-light")
    /// Image `onepassword-navbar`.
    static let onepasswordNavbar = ImageResource(bundle: _R.hostingBundle, name: "onepassword-navbar")
    /// Image `onepassword-toolbar-light`.
    static let onepasswordToolbarLight = ImageResource(bundle: _R.hostingBundle, name: "onepassword-toolbar-light")
    /// Image `onepassword-toolbar`.
    static let onepasswordToolbar = ImageResource(bundle: _R.hostingBundle, name: "onepassword-toolbar")
    
    /// `UIImage(named: "About", bundle: ..., traitCollection: ...)`
    static func about(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.about, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "AirAudio", bundle: ..., traitCollection: ...)`
    static func airAudio(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.airAudio, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "AirPlay", bundle: ..., traitCollection: ...)`
    static func airPlay(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.airPlay, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "AirSpeaker", bundle: ..., traitCollection: ...)`
    static func airSpeaker(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.airSpeaker, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "AirTV", bundle: ..., traitCollection: ...)`
    static func airTV(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.airTV, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Anime", bundle: ..., traitCollection: ...)`
    static func anime(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.anime, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Autoplay", bundle: ..., traitCollection: ...)`
    static func autoplay(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.autoplay, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "BookmarkOff", bundle: ..., traitCollection: ...)`
    static func bookmarkOff(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bookmarkOff, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "BookmarkOn", bundle: ..., traitCollection: ...)`
    static func bookmarkOn(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bookmarkOn, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "CastOff", bundle: ..., traitCollection: ...)`
    static func castOff(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.castOff, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "CastOn", bundle: ..., traitCollection: ...)`
    static func castOn(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.castOn, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "CastOn0", bundle: ..., traitCollection: ...)`
    static func castOn0(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.castOn0, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "CastOn1", bundle: ..., traitCollection: ...)`
    static func castOn1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.castOn1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "CastOn2", bundle: ..., traitCollection: ...)`
    static func castOn2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.castOn2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Check Updates", bundle: ..., traitCollection: ...)`
    static func checkUpdates(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.checkUpdates, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Checkmark", bundle: ..., traitCollection: ...)`
    static func checkmark(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.checkmark, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.close, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Color", bundle: ..., traitCollection: ...)`
    static func color(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.color, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Disclosure Indicator", bundle: ..., traitCollection: ...)`
    static func disclosureIndicator(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.disclosureIndicator, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Download Limit", bundle: ..., traitCollection: ...)`
    static func downloadLimit(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.downloadLimit, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.error, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Fast Forward", bundle: ..., traitCollection: ...)`
    static func fastForward(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.fastForward, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.filter, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Font", bundle: ..., traitCollection: ...)`
    static func font(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.font, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.heart, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Maximum Peers", bundle: ..., traitCollection: ...)`
    static func maximumPeers(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.maximumPeers, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Media Selection", bundle: ..., traitCollection: ...)`
    static func mediaSelection(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.mediaSelection, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Movies", bundle: ..., traitCollection: ...)`
    static func movies(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.movies, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Open Source Licenses", bundle: ..., traitCollection: ...)`
    static func openSourceLicenses(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.openSourceLicenses, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Pause", bundle: ..., traitCollection: ...)`
    static func pause(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.pause, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.placeholder, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.play, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Progress Indicator", bundle: ..., traitCollection: ...)`
    static func progressIndicator(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.progressIndicator, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Quality", bundle: ..., traitCollection: ...)`
    static func quality(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.quality, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Remove Cache", bundle: ..., traitCollection: ...)`
    static func removeCache(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.removeCache, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Report Bug", bundle: ..., traitCollection: ...)`
    static func reportBug(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.reportBug, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Rewind", bundle: ..., traitCollection: ...)`
    static func rewind(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.rewind, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Scale To Fill", bundle: ..., traitCollection: ...)`
    static func scaleToFill(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.scaleToFill, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Scale To Fit", bundle: ..., traitCollection: ...)`
    static func scaleToFit(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.scaleToFit, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Scrubber Image", bundle: ..., traitCollection: ...)`
    static func scrubberImage(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.scrubberImage, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.search, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.settings, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Size", bundle: ..., traitCollection: ...)`
    static func size(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.size, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "SkipBack", bundle: ..., traitCollection: ...)`
    static func skipBack(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.skipBack, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "SkipForward", bundle: ..., traitCollection: ...)`
    static func skipForward(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.skipForward, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.star, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "StarOff", bundle: ..., traitCollection: ...)`
    static func starOff(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.starOff, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Stroke Color", bundle: ..., traitCollection: ...)`
    static func strokeColor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.strokeColor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Stroke Width", bundle: ..., traitCollection: ...)`
    static func strokeWidth(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.strokeWidth, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Subtitles", bundle: ..., traitCollection: ...)`
    static func subtitles(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.subtitles, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "TV", bundle: ..., traitCollection: ...)`
    static func tV(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tV, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Upload Limit", bundle: ..., traitCollection: ...)`
    static func uploadLimit(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.uploadLimit, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Version", bundle: ..., traitCollection: ...)`
    static func version(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.version, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Volume Maximum", bundle: ..., traitCollection: ...)`
    static func volumeMaximum(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.volumeMaximum, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Volume Minimum", bundle: ..., traitCollection: ...)`
    static func volumeMinimum(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.volumeMinimum, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "WatchedOff", bundle: ..., traitCollection: ...)`
    static func watchedOff(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.watchedOff, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "WatchedOn", bundle: ..., traitCollection: ...)`
    static func watchedOn(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.watchedOn, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "onepassword-button", bundle: ..., traitCollection: ...)`
    static func onepasswordButton(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.onepasswordButton, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "onepassword-button-light", bundle: ..., traitCollection: ...)`
    static func onepasswordButtonLight(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.onepasswordButtonLight, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "onepassword-navbar", bundle: ..., traitCollection: ...)`
    static func onepasswordNavbar(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.onepasswordNavbar, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "onepassword-navbar-light", bundle: ..., traitCollection: ...)`
    static func onepasswordNavbarLight(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.onepasswordNavbarLight, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "onepassword-toolbar", bundle: ..., traitCollection: ...)`
    static func onepasswordToolbar(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.onepasswordToolbar, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "onepassword-toolbar-light", bundle: ..., traitCollection: ...)`
    static func onepasswordToolbarLight(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.onepasswordToolbarLight, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `PCTPickerView`.
    static let pCTPickerView = _R.nib._PCTPickerView()
    /// Nib `PCTTablePickerView`.
    static let pCTTablePickerView = _R.nib._PCTTablePickerView()
    /// Nib `TableViewBackground`.
    static let tableViewBackground = _R.nib._TableViewBackground()
    
    /// `UINib(name: "PCTPickerView", bundle: ...)`
    static func pCTPickerView(_: Void) -> UINib {
      return UINib(resource: R.nib.pCTPickerView)
    }
    
    /// `UINib(name: "PCTTablePickerView", bundle: ...)`
    static func pCTTablePickerView(_: Void) -> UINib {
      return UINib(resource: R.nib.pCTTablePickerView)
    }
    
    /// `UINib(name: "TableViewBackground", bundle: ...)`
    static func tableViewBackground(_: Void) -> UINib {
      return UINib(resource: R.nib.tableViewBackground)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `castCell`.
    static let castCell: ReuseIdentifier<UIView> = ReuseIdentifier(identifier: "castCell")
    /// Reuse identifier `filter`.
    static let filter: ReuseIdentifier<FilterCollectionReusableView> = ReuseIdentifier(identifier: "filter")
    /// Reuse identifier `footer`.
    static let footer: ReuseIdentifier<UIView> = ReuseIdentifier(identifier: "footer")
    /// Reuse identifier `header`.
    static let header: ReuseIdentifier<UIView> = ReuseIdentifier(identifier: "header")
    /// Reuse identifier `relatedCell`.
    static let relatedCell: ReuseIdentifier<CoverCollectionViewCell> = ReuseIdentifier(identifier: "relatedCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `AnimeCollectionViewController`, and contains static references to 1 segues.
    struct animeCollectionViewController {
      /// Segue identifier `showDetail`.
      static let showDetail: StoryboardSegueIdentifier<UIStoryboardSegue, AnimeCollectionViewController, TVShowContainerViewController> = StoryboardSegueIdentifier(identifier: "showDetail")
      
      /// Optionally returns a typed version of segue `showDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDetail(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, AnimeCollectionViewController, TVShowContainerViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.animeCollectionViewController.showDetail, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `PCTPlayerViewController`, and contains static references to 2 segues.
    struct pCTPlayerViewController {
      /// Segue identifier `showDevices`.
      static let showDevices: StoryboardSegueIdentifier<UIStoryboardSegue, PCTPlayerViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "showDevices")
      /// Segue identifier `showSubtitles`.
      static let showSubtitles: StoryboardSegueIdentifier<UIStoryboardSegue, PCTPlayerViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "showSubtitles")
      
      /// Optionally returns a typed version of segue `showDevices`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDevices(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, PCTPlayerViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.pCTPlayerViewController.showDevices, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSubtitles`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSubtitles(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, PCTPlayerViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.pCTPlayerViewController.showSubtitles, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `Animes`.
    static let animes = _R.storyboard.animes()
    /// Storyboard `Commons`.
    static let commons = _R.storyboard.commons()
    /// Storyboard `Launch Screen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Movies`.
    static let movies = _R.storyboard.movies()
    /// Storyboard `Player`.
    static let player = _R.storyboard.player()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `TVShows`.
    static let tVShows = _R.storyboard.tVShows()
    /// Storyboard `Terms`.
    static let terms = _R.storyboard.terms()
    
    /// `UIStoryboard(name: "Animes", bundle: ...)`
    static func animes(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.animes)
    }
    
    /// `UIStoryboard(name: "Commons", bundle: ...)`
    static func commons(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.commons)
    }
    
    /// `UIStoryboard(name: "Launch Screen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Movies", bundle: ...)`
    static func movies(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.movies)
    }
    
    /// `UIStoryboard(name: "Player", bundle: ...)`
    static func player(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.player)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "TVShows", bundle: ...)`
    static func tVShows(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.tVShows)
    }
    
    /// `UIStoryboard(name: "Terms", bundle: ...)`
    static func terms(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.terms)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 0 localization keys.
    struct localizable {
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.popcorntimetv.popcorntime.ios") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _PCTPickerView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "PCTPickerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    struct _PCTTablePickerView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "PCTTablePickerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    struct _TableViewBackground: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "TableViewBackground"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TableViewBackground? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TableViewBackground
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try movies.validate()
      try animes.validate()
      try commons.validate()
      try player.validate()
      try terms.validate()
      try tVShows.validate()
      try settings.validate()
    }
    
    struct animes: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Animes"
      
      static func validate() throws {
        if UIImage(named: "Anime") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Anime' is used in storyboard 'Animes', but couldn't be loaded.") }
        if UIImage(named: "Filter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Filter' is used in storyboard 'Animes', but couldn't be loaded.") }
        if UIImage(named: "Placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Placeholder' is used in storyboard 'Animes', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct commons: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let genresNavigationController = StoryboardViewControllerResource<UINavigationController>(identifier: "GenresNavigationController")
      let genresTableViewController = StoryboardViewControllerResource<GenresTableViewController>(identifier: "GenresTableViewController")
      let loadingViewController = StoryboardViewControllerResource<LoadingViewController>(identifier: "LoadingViewController")
      let name = "Commons"
      
      func genresNavigationController(_: Void) -> UINavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(genresNavigationController)
      }
      
      func genresTableViewController(_: Void) -> GenresTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(genresTableViewController)
      }
      
      func loadingViewController(_: Void) -> LoadingViewController? {
        return UIStoryboard(resource: self).instantiateViewController(loadingViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "Placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Placeholder' is used in storyboard 'Commons', but couldn't be loaded.") }
        if _R.storyboard.commons().loadingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loadingViewController' could not be loaded from storyboard 'Commons' as 'LoadingViewController'.") }
        if _R.storyboard.commons().genresTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'genresTableViewController' could not be loaded from storyboard 'Commons' as 'GenresTableViewController'.") }
        if _R.storyboard.commons().genresNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'genresNavigationController' could not be loaded from storyboard 'Commons' as 'UINavigationController'.") }
      }
      
      private init() {}
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "Launch Screen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType {
      typealias InitialController = MainTabBarController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      
      private init() {}
    }
    
    struct movies: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let movieDetailViewController = StoryboardViewControllerResource<MovieDetailViewController>(identifier: "MovieDetailViewController")
      let moviesCollectionViewController = StoryboardViewControllerResource<MoviesCollectionViewController>(identifier: "MoviesCollectionViewController")
      let name = "Movies"
      
      func movieDetailViewController(_: Void) -> MovieDetailViewController? {
        return UIStoryboard(resource: self).instantiateViewController(movieDetailViewController)
      }
      
      func moviesCollectionViewController(_: Void) -> MoviesCollectionViewController? {
        return UIStoryboard(resource: self).instantiateViewController(moviesCollectionViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "Star") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star' is used in storyboard 'Movies', but couldn't be loaded.") }
        if UIImage(named: "Quality") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Quality' is used in storyboard 'Movies', but couldn't be loaded.") }
        if UIImage(named: "StarOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StarOff' is used in storyboard 'Movies', but couldn't be loaded.") }
        if UIImage(named: "Placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Placeholder' is used in storyboard 'Movies', but couldn't be loaded.") }
        if UIImage(named: "Filter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Filter' is used in storyboard 'Movies', but couldn't be loaded.") }
        if UIImage(named: "Subtitles") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Subtitles' is used in storyboard 'Movies', but couldn't be loaded.") }
        if UIImage(named: "Movies") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Movies' is used in storyboard 'Movies', but couldn't be loaded.") }
        if UIImage(named: "WatchedOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WatchedOff' is used in storyboard 'Movies', but couldn't be loaded.") }
        if _R.storyboard.movies().moviesCollectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moviesCollectionViewController' could not be loaded from storyboard 'Movies' as 'MoviesCollectionViewController'.") }
        if _R.storyboard.movies().movieDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieDetailViewController' could not be loaded from storyboard 'Movies' as 'MovieDetailViewController'.") }
      }
      
      private init() {}
    }
    
    struct player: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PCTPlayerViewController
      
      let bundle = _R.hostingBundle
      let castPlayerViewController = StoryboardViewControllerResource<CastPlayerViewController>(identifier: "CastPlayerViewController")
      let name = "Player"
      let pCTPlayerViewController = StoryboardViewControllerResource<PCTPlayerViewController>(identifier: "PCTPlayerViewController")
      let streamToDevicesTableViewController = StoryboardViewControllerResource<StreamToDevicesTableViewController>(identifier: "StreamToDevicesTableViewController")
      
      func castPlayerViewController(_: Void) -> CastPlayerViewController? {
        return UIStoryboard(resource: self).instantiateViewController(castPlayerViewController)
      }
      
      func pCTPlayerViewController(_: Void) -> PCTPlayerViewController? {
        return UIStoryboard(resource: self).instantiateViewController(pCTPlayerViewController)
      }
      
      func streamToDevicesTableViewController(_: Void) -> StreamToDevicesTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(streamToDevicesTableViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "AirPlay") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AirPlay' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "Volume Minimum") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Volume Minimum' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "SkipBack") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SkipBack' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "Volume Maximum") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Volume Maximum' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "Play") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Play' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "Rewind") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rewind' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "Scale To Fill") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Scale To Fill' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "Close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Close' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "Pause") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Pause' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "Fast Forward") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Fast Forward' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "Media Selection") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Media Selection' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "SkipForward") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SkipForward' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIImage(named: "Checkmark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Checkmark' is used in storyboard 'Player', but couldn't be loaded.") }
        if _R.storyboard.player().pCTPlayerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pCTPlayerViewController' could not be loaded from storyboard 'Player' as 'PCTPlayerViewController'.") }
        if _R.storyboard.player().streamToDevicesTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'streamToDevicesTableViewController' could not be loaded from storyboard 'Player' as 'StreamToDevicesTableViewController'.") }
        if _R.storyboard.player().castPlayerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'castPlayerViewController' could not be loaded from storyboard 'Player' as 'CastPlayerViewController'.") }
      }
      
      private init() {}
    }
    
    struct settings: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bugReportTableViewController = StoryboardViewControllerResource<BugReportTableViewController>(identifier: "BugReportTableViewController")
      let bundle = _R.hostingBundle
      let name = "Settings"
      let settingsTableViewController = StoryboardViewControllerResource<SettingsTableViewController>(identifier: "SettingsTableViewController")
      
      func bugReportTableViewController(_: Void) -> BugReportTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(bugReportTableViewController)
      }
      
      func settingsTableViewController(_: Void) -> SettingsTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(settingsTableViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "Color") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Color' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "Report Bug") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Report Bug' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "onepassword-button") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onepassword-button' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "Subtitles") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Subtitles' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "Open Source Licenses") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Open Source Licenses' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "Stroke Color") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Stroke Color' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "Size") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Size' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "Stroke Width") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Stroke Width' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "Font") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Font' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "Version") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Version' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "Settings") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Settings' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "Check Updates") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Check Updates' is used in storyboard 'Settings', but couldn't be loaded.") }
        if _R.storyboard.settings().settingsTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsTableViewController' could not be loaded from storyboard 'Settings' as 'SettingsTableViewController'.") }
        if _R.storyboard.settings().bugReportTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bugReportTableViewController' could not be loaded from storyboard 'Settings' as 'BugReportTableViewController'.") }
      }
      
      private init() {}
    }
    
    struct tVShows: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let episodeDetailViewController = StoryboardViewControllerResource<EpisodeDetailViewController>(identifier: "EpisodeDetailViewController")
      let name = "TVShows"
      let tVShowDetailViewController = StoryboardViewControllerResource<TVShowDetailViewController>(identifier: "TVShowDetailViewController")
      let tVShowsCollectionViewController = StoryboardViewControllerResource<TVShowsCollectionViewController>(identifier: "TVShowsCollectionViewController")
      
      func episodeDetailViewController(_: Void) -> EpisodeDetailViewController? {
        return UIStoryboard(resource: self).instantiateViewController(episodeDetailViewController)
      }
      
      func tVShowDetailViewController(_: Void) -> TVShowDetailViewController? {
        return UIStoryboard(resource: self).instantiateViewController(tVShowDetailViewController)
      }
      
      func tVShowsCollectionViewController(_: Void) -> TVShowsCollectionViewController? {
        return UIStoryboard(resource: self).instantiateViewController(tVShowsCollectionViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "Star") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star' is used in storyboard 'TVShows', but couldn't be loaded.") }
        if UIImage(named: "Quality") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Quality' is used in storyboard 'TVShows', but couldn't be loaded.") }
        if UIImage(named: "StarOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StarOff' is used in storyboard 'TVShows', but couldn't be loaded.") }
        if UIImage(named: "Placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Placeholder' is used in storyboard 'TVShows', but couldn't be loaded.") }
        if UIImage(named: "Filter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Filter' is used in storyboard 'TVShows', but couldn't be loaded.") }
        if UIImage(named: "Subtitles") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Subtitles' is used in storyboard 'TVShows', but couldn't be loaded.") }
        if UIImage(named: "TV") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TV' is used in storyboard 'TVShows', but couldn't be loaded.") }
        if UIImage(named: "WatchedOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WatchedOff' is used in storyboard 'TVShows', but couldn't be loaded.") }
        if _R.storyboard.tVShows().tVShowDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tVShowDetailViewController' could not be loaded from storyboard 'TVShows' as 'TVShowDetailViewController'.") }
        if _R.storyboard.tVShows().tVShowsCollectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tVShowsCollectionViewController' could not be loaded from storyboard 'TVShows' as 'TVShowsCollectionViewController'.") }
        if _R.storyboard.tVShows().episodeDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'episodeDetailViewController' could not be loaded from storyboard 'TVShows' as 'EpisodeDetailViewController'.") }
      }
      
      private init() {}
    }
    
    struct terms: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Terms"
      let termsOfServiceNavigationController = StoryboardViewControllerResource<UINavigationController>(identifier: "TermsOfServiceNavigationController")
      let termsOfServiceViewController = StoryboardViewControllerResource<TermsOfServiceViewController>(identifier: "TermsOfServiceViewController")
      
      func termsOfServiceNavigationController(_: Void) -> UINavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(termsOfServiceNavigationController)
      }
      
      func termsOfServiceViewController(_: Void) -> TermsOfServiceViewController? {
        return UIStoryboard(resource: self).instantiateViewController(termsOfServiceViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.terms().termsOfServiceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsOfServiceViewController' could not be loaded from storyboard 'Terms' as 'TermsOfServiceViewController'.") }
        if _R.storyboard.terms().termsOfServiceNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsOfServiceNavigationController' could not be loaded from storyboard 'Terms' as 'UINavigationController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}